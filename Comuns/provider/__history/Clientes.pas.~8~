unit Clientes;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.DB, Vcl.ExtCtrls, Data.Win.ADODB, Vcl.StdCtrls, Vcl.Grids,
  Vcl.DBGrids, Vcl.ComCtrls, Vcl.Mask, JvExMask, JvToolEdit, Vcl.DBCtrls, JvDBControls, FrameToolBar,ComObj, ActiveX, Vcl.Buttons, Vcl.Menus;

type
  TFormClientes = class(TForm)
    pnl1: TPanel;
    PagListagem: TPageControl;
    ts1: TTabSheet;
    PagManutencao: TTabSheet;
    dbgrd1: TDBGrid;
    lblTitulo: TLabel;
    Pesquisa: TEdit;
    DSQueryListagem: TDataSource;
    QueryListagem: TADOQuery;
    TimerCli: TTimer;
    Todos: TCheckBox;
    QueryCliente: TADOQuery;
    DSQueryCliente: TDataSource;
    lbl1: TLabel;
    lbl2: TLabel;
    dbedtCliNome: TDBEdit;
    atncfldQueryListagemCodCliente: TAutoIncField;
    wdstrngfldQueryListagemNome: TWideStringField;
    wdstrngfldQueryListagemEmail: TWideStringField;
    wdstrngfldQueryListagemTelefone: TWideStringField;
    wdstrngfldQueryListagemEndereco: TWideStringField;
    wdstrngfldQueryListagemCidade: TWideStringField;
    wdstrngfldQueryListagemEstado: TWideStringField;
    wdstrngfldQueryListagemCEP: TWideStringField;
    dtmfldQueryListagemDataCadastro: TDateTimeField;
    atncfldQueryClienteCodCliente: TAutoIncField;
    wdstrngfldQueryClienteNome: TWideStringField;
    wdstrngfldQueryClienteEmail: TWideStringField;
    wdstrngfldQueryClienteTelefone: TWideStringField;
    wdstrngfldQueryClienteEndereco: TWideStringField;
    wdstrngfldQueryClienteCidade: TWideStringField;
    wdstrngfldQueryClienteEstado: TWideStringField;
    wdstrngfldQueryClienteCEP: TWideStringField;
    dtmfldQueryClienteDataCadastro: TDateTimeField;
    lbl3: TLabel;
    CodCliente: TDBText;
    dbtEmail: TDBEdit;
    DBTelefone: TDBEdit;
    lbl4: TLabel;
    lbl6: TLabel;
    Label1: TLabel;
    dbedtTelefone: TDBEdit;
    dbedtCEP: TDBEdit;
    lbl7: TLabel;
    lbl8: TLabel;
    dbedtCEP1: TDBEdit;
    lbl81: TLabel;
    lbl82: TLabel;
    DbEstado: TDBText;
    frmfrmtlbr1: TFrmFrameToolBar;
    PagClientesExcel: TTabSheet;
    pnl2: TPanel;
    edt1: TEdit;
    Titulo1: TLabel;
    QueryExcel: TADOQuery;
    atncfldQueryClienteCodCliente1: TAutoIncField;
    wdstrngfld: TWideStringField;
    wdstrngfld1: TWideStringField;
    wdstrngfld2: TWideStringField;
    dtfldQueryClienteDataNascimento1: TDateField;
    wdstrngfld3: TWideStringField;
    wdstrngfld4: TWideStringField;
    wdstrngfld5: TWideStringField;
    wdstrngfld6: TWideStringField;
    dtmfldQueryClienteDataCadastro1: TDateTimeField;
    btnSBAparencia: TSpeedButton;
    GridExcel: TStringGrid;
    PopMenu1: TPopupMenu;
    DeletaLinha: TMenuItem;
    pnl3: TPanel;
    btn1: TSpeedButton;
    pnl31: TPanel;
    btn11: TSpeedButton;
    procedure TimerCliTimer(Sender: TObject);
    procedure dbgrd1TitleClick(Column: TColumn);
    procedure TodosClick(Sender: TObject);
    procedure PesquisaChange(Sender: TObject);
    procedure DateEdit1Change(Sender: TObject);
    procedure dbgrd1DrawColumnCell(Sender: TObject; const Rect: TRect; DataCol: Integer; Column: TColumn; State: TGridDrawState);
    procedure dbgrd1CellClick(Column: TColumn);
    procedure FormShow(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure QueryClienteBeforeEdit(DataSet: TDataSet);
    procedure btnSBAparenciaClick(Sender: TObject);
    procedure DeletaLinhaClick(Sender: TObject);
    procedure btn1Click(Sender: TObject);
    procedure btn11Click(Sender: TObject);
  private
    { Private declarations }
    CampoFiltrado : string;
    ColunaFiltrada: TColumn;
    procedure AjustaTamanhoGrid(Grid: TStringGrid);
    procedure LimpaGrid;
    procedure AjustaCorDaGrid(Grid: TDBGrid; const Rect: TRect; DataCol: Integer; State: TGridDrawState);
  public
    { Public declarations }
  end;

var
  FormClientes: TFormClientes;

implementation

uses
  ViewBase;

{$R *.dfm}

procedure TFormClientes.AjustaCorDaGrid(Grid: TDBGrid; const Rect: TRect; DataCol: Integer; State: TGridDrawState);
begin
    // padroniza zebrado nas colunas
  if(datacol mod 2 = 0)
    then Grid.Columns[datacol].Color := clInfoBk
    else Grid.Columns[datacol].Color := clWindow;

  // padroniza dor de fundo da linha selecionada
  if gDSelected in State
    then Grid.Canvas.Brush.Color := clActiveCaption;

  // aplica
  Grid.DefaultDrawDataCell(Rect, Grid.columns[datacol].field, State);
end;

procedure TFormClientes.AjustaTamanhoGrid(Grid: TStringGrid);
var
  Col, Row, MaxWidth, TextWidth: Integer;
  CellText: string;
begin
  for Col := 0 to Grid.ColCount - 1 do
  begin
    MaxWidth := 0;
    for Row := 0 to Grid.RowCount - 1 do
    begin
      CellText := Grid.Cells[Col, Row];
      TextWidth := Canvas.TextWidth(CellText); // Calcula a largura do texto
      if TextWidth > MaxWidth then
        MaxWidth := TextWidth; // Atualiza a largura máxima se necessário
    end;
    Grid.ColWidths[Col] := MaxWidth + 10; // Ajusta a largura da coluna
  end;

end;

procedure TFormClientes.btn11Click(Sender: TObject);
var
  i: integer;
  NomeTab : string;
begin
  LimpaGrid;
  edt1.Text := '';
  for i := 0 to PagListagem.PageCount - 1 do
  begin
    PagListagem.Pages[i].TabVisible := True; // Torna a aba visível
  end;
  ShowMessage('Dados Limpos com Sucesso !!');
end;

procedure TFormClientes.btn1Click(Sender: TObject);
var
  Row, Col: Integer;
  Valores: string;
begin
    Row := 1;
    while Row < GridExcel.RowCount do
    begin
      Valores := '';
      for Col := 1 to GridExcel.ColCount - 1 do
      begin
        if Col > 1 then
          Valores := Valores + ', ';
        Valores := Valores + QuotedStr(GridExcel.Cells[Col, Row]);
      end;
      QueryExcel.SQL.Text := 'insert into Clientes (Nome,Email,Telefone,Endereco,Cidade,Estado,CEP,DataCadastro) ' +
                           'VALUES (' + Valores + ','+DateToStr(Now)+')';
      QueryExcel.ExecSQL;
      Inc(Row);
    end;
    LimpaGrid;
    ShowMessage('Inclusão Realizada Com Sucesso !!');
end;

procedure TFormClientes.btnSBAparenciaClick(Sender: TObject);
var
  OpenDialog: TOpenDialog;
  ExcelApp, Workbook, Worksheet: OleVariant;
  Row: Integer;
  FilePath,Cellstring: string;
  CellValue: Integer;
  i: integer;

  ListaCodClientes: TStringList;
  CodCliente : string;


  QuntLinha,QuantColuna,Col: Integer;

begin
    for i := 0 to PagListagem.PageCount - 1 do
      begin
        PagListagem.Pages[i].TabVisible := PagListagem.Pages[i] = PagClientesExcel;
      end;

    OpenDialog := TOpenDialog.Create(nil);
    ListaCodClientes := TStringList.Create;
try
    OpenDialog.Filter := 'Excel Files|*.xls;*.xlsx';
    if OpenDialog.Execute then
    begin
      FilePath := OpenDialog.FileName;
      // Mostra o nome do arquivo no TEdit
      edt1.Text := ExtractFileName(FilePath); // Exibe apenas o nome do arquivo
      // Cria a instância do Excel
      ExcelApp := CreateOleObject('Excel.Application');
      try
        ExcelApp.Visible := False; // Não mostrar a aplicação
        // Abre o arquivo Excel
        Workbook := ExcelApp.Workbooks.Open(FilePath);
        Worksheet := Workbook.Worksheets[1];
        QuntLinha := Worksheet.UsedRange.Rows.Count;
        QuantColuna := Worksheet.UsedRange.Columns.Count;

        // Configurar o número de linhas e colunas no StringGrid
        GridExcel.RowCount := QuntLinha;
        GridExcel.ColCount := QuantColuna;
        // Loop para preencher a grid com os dados da planilha
        for Row := 1 to QuntLinha do
        begin
          for Col := 1 to QuantColuna do
          begin
            // Ler os dados da célula e colocar no StringGrid
            GridExcel.Cells[Col - 1, Row - 1] := VarToStr(Worksheet.Cells[Row, Col].Value);
          end;
        end;
        AjustaTamanhoGrid(GridExcel);
          finally
            // Fecha o Workbook e o Excel
            Workbook.Close(False);
            ExcelApp.Quit;
            ExcelApp := Unassigned; // Libera a instância do Excel

      end;
    end;
  finally
    OpenDialog.Free;
  end;

end;

procedure TFormClientes.DateEdit1Change(Sender: TObject);
begin
    TimerCli.Enabled  := false;
    TimerCli.Enabled  := True;
end;

procedure TFormClientes.dbgrd1CellClick(Column: TColumn);
begin
  QueryCliente.Close;
  QueryCliente.Parameters.ParamByName('CodCliente').Value := dbgrd1.DataSource.DataSet.FieldByName('CodCliente').AsInteger;
  QueryCliente.Open;
end;

procedure TFormClientes.dbgrd1DrawColumnCell(Sender: TObject; const Rect: TRect; DataCol: Integer; Column: TColumn; State: TGridDrawState);
begin

   AjustaCorDaGrid(dbgrd1, Rect, DataCol, State);
end;

procedure TFormClientes.dbgrd1TitleClick(Column: TColumn);
begin
  ColunaFiltrada := Column;
  if Column.Field.FieldName <> CampoFiltrado then
    begin
      CampoFiltrado := Column.Field.FieldName;
    end;


  if Assigned(ColunaFiltrada) then
    ColunaFiltrada.Title.Caption := StringReplace(ColunaFiltrada.Title.Caption, ' ↑', '', [rfReplaceAll]);
  ColunaFiltrada := Column;
  ColunaFiltrada.Title.Caption := ColunaFiltrada.Title.Caption;
  lblTitulo.Caption := 'Pesquisar: ' +Column.Title.Caption;
  lblTitulo.Width := lblTitulo.Canvas.TextWidth(lblTitulo.Caption);
  Pesquisa.Left := lblTitulo.Left + lblTitulo.Width + 10;
  Pesquisa.Width := 453;
  dbgrd1.Invalidate;


end;

procedure TFormClientes.DeletaLinhaClick(Sender: TObject);
var
  LinhaSelecionado,AjudaLinhaGrid : integer;
begin
  // Verifica se há mais de uma linha (para evitar deletar todas as linhas)
  if GridExcel.RowCount > 1 then
  begin
    LinhaSelecionado := GridExcel.Row; // Obtém a linha selecionada
    // Desloca todas as linhas abaixo da linha selecionada para cima
    for AjudaLinhaGrid := 0 to GridExcel.ColCount - 1 do
    begin
      for LinhaSelecionado := GridExcel.Row to GridExcel.RowCount - 2 do
      begin
        GridExcel.Cells[AjudaLinhaGrid, LinhaSelecionado] := GridExcel.Cells[AjudaLinhaGrid, LinhaSelecionado + 1];
      end;
    end;
    // Remove a última linha, que agora está duplicada
    GridExcel.RowCount := GridExcel.RowCount - 1;
  end
  else
    ShowMessage('Não é possível excluir todas as linhas.');
end;

procedure TFormClientes.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  Action := CaFree;
  Release;
  FormClientes := nil;
end;

procedure TFormClientes.FormShow(Sender: TObject);
begin
    PagListagem.ActivePageIndex := 0;
end;

procedure TFormClientes.LimpaGrid;
begin
  // Limpa o conteúdo do grid
  GridExcel.RowCount := 2;
  GridExcel.ColCount := 2;
  // Limpa todas as células do StringGrid
  GridExcel.Cols[0].Clear;
  GridExcel.Cols[1].Clear;
  // Restaura as configurações padrão
  GridExcel.FixedCols := 1;
  GridExcel.FixedRows := 1;
  // Habilita a edição das células
  GridExcel.Options := GridExcel.Options + [goEditing];
  // Redefinindo as cores e configurações do grid
  GridExcel.Color := clWindow;
  GridExcel.DefaultRowHeight := 24;
  // Forçar o redesenho do grid
  GridExcel.Invalidate;

end;

procedure TFormClientes.PesquisaChange(Sender: TObject);
begin
    TimerCli.Enabled  := false;
   TimerCli.Enabled  := True;
end;

procedure TFormClientes.QueryClienteBeforeEdit(DataSet: TDataSet);
var
  i : integer;
begin
for i := 0 to PagListagem.PageCount - 1 do
  begin
    // Esconde todas as abas, exceto a que foi passada como parâmetro
    PagListagem.Pages[i].TabVisible := PagListagem.Pages[i] = PagManutencao;
  end;
end;


procedure TFormClientes.TimerCliTimer(Sender: TObject);
begin
  TimerCli.Enabled := false;

  if Todos.Checked then
    begin
      QueryListagem.Close;
      QueryListagem.SQL.Clear;
      QueryListagem.SQL.Add('select * from Clientes');
      QueryListagem.Open;
    end
  else
    begin
      if (Pesquisa.Text <> '')   then
        begin
          QueryListagem.Close;
          QueryListagem.SQL.Clear;
          QueryListagem.SQL.Add('select * from Clientes where (1=1)');

        if CampoFiltrado = 'Nome' then
            QueryListagem.SQL.Add(' and Nome like ''%'+Pesquisa.Text+'%''')

        else if CampoFiltrado = 'Email' then
          QueryListagem.SQL.Add(' and Email like ''%'+Pesquisa.Text+'%''')

        else if CampoFiltrado = 'Telefone' then
          QueryListagem.SQL.Add(' and Telefone like ''%'+Pesquisa.Text+'%''')

        else if CampoFiltrado = 'Cidade' then
          QueryListagem.SQL.Add(' and Cidade like ''%'+Pesquisa.Text+'%''')

        else if CampoFiltrado = 'Estado' then
          QueryListagem.SQL.Add(' and Estado like ''%'+Pesquisa.Text+'%''')

        else if CampoFiltrado = 'CEP' then
          QueryListagem.SQL.Add(' and CEP like ''%'+Pesquisa.Text+'%''');


        QueryListagem.Open;
        end;


    end;

end;

procedure TFormClientes.TodosClick(Sender: TObject);
begin
  TimerCli.Enabled  := false;
  TimerCli.Enabled  := True;
end;

end.
